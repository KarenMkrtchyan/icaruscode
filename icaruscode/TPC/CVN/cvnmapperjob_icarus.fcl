#include "services_common_icarus.fcl"
#include "channelmapping_icarus.fcl"

#include "correctionservices_icarus.fcl"
#include "seedservice.fcl"
#include "particleinventoryservice.fcl"
#include "backtrackerservice.fcl"
#include "photonbacktrackerservice.fcl"
#include "mccheatermodules.fcl"

#include "CVNMapper.fcl"

process_name: CVNMapper

services:
{
  ParticleInventoryService:  @local::standard_particleinventoryservice
  BackTrackerService:        @local::standard_backtrackerservice

  TimeTracker:           {}
  RandomNumberGenerator: {}
  MemoryTracker:         {} # default is one
  FileCatalogMetadata:   @local::art_file_catalog_mc
                         @table::icarus_detsim_services
  #IICARUSChannelMap:     @local::icarus_channelmappinggservice
  #Geometry:              @local::icarus_geo


  # Load the service that manages root files for histograms.
  TFileService: { fileName: "cvn_r%r_s%s_hist.root"
                  closeFileFast: false }
}

source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName:    "cvnmapper_r%r_s%s.root" 
    fastCloning: false
    dataTier: "full-reconstructed"
  }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
  # Declare the modules  
  producers:
  { 
    cvnmap: @local::standard_cvnmapper
  }
  analyzers:
  {  
    zlib: @local::standard_cvnzlibmaker
  }
  # Build the paths
  map:       [ cvnmap ]
  ana:       [ zlib ]
  end_paths: [ ana ]
}

# CVNMapper configuration
physics.producers.cvnmap.PixelMapProducer.TimeResolution: 1500
physics.producers.cvnmap.PixelMapProducer.Threshold: 0.6
physics.producers.cvnmap.HitsModuleLabel: "gaushit"
physics.producers.cvnmap.MinClusterHits: 50
physics.producers.cvnmap.TimeResolution: 1600
physics.producers.cvnmap.PlaneLength: 500
physics.producers.cvnmap.TdcWidth: 500

# ZlibMaker configuration
physics.analyzers.zlib.PixelMapInput: "cvnmap"
